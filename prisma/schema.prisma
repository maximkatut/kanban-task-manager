// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    columns   Column[]
}

model Column {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    order   Int
    tasks   Task[]
    Board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    boardId String @db.ObjectId
    color   String
}

model Task {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String?
    status      String
    order       Int
    subtasks    Subtask[]
    Column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    columnId    String    @db.ObjectId
}

model Subtask {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    isCompleted Boolean
    order       Int
    Task        Task    @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    taskId      String  @db.ObjectId
}
